name: Auto Update Docs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"
          echo "GIT_AUTHOR_NAME=Cursor Agent" >> $GITHUB_ENV
          echo "GIT_AUTHOR_EMAIL=cursoragent@cursor.com" >> $GITHUB_ENV
          echo "GIT_COMMITTER_NAME=Cursor Agent" >> $GITHUB_ENV
          echo "GIT_COMMITTER_EMAIL=cursoragent@cursor.com" >> $GITHUB_ENV

      - name: Run Cursor agent (headless) to update docs based on PR diff
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          MODEL: gpt-5
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
          DOCS_BRANCH: ${{ format('{0}-docs', github.head_ref) }}
        run: |
          EVENT_JSON=$(cat "$GITHUB_EVENT_PATH" | sed 's/`/\\`/g')

          # Discover previous docs branch state if it exists
          git fetch origin "+refs/heads/*:refs/remotes/origin/*"
          if git ls-remote --exit-code --heads origin "${DOCS_BRANCH}" >/dev/null 2>&1; then
            export PREV_DOCS_SHA=$(git rev-parse --verify "origin/${DOCS_BRANCH}")
          else
            export PREV_DOCS_SHA=""
          fi

          # Ensure the docs branch exists; if missing, create it from the PR head branch
          if [ -z "${PREV_DOCS_SHA}" ]; then
            # Ensure we have a local tracking branch for HEAD_REF
            git fetch origin "${HEAD_REF}:${HEAD_REF}" || true
            git checkout -B "${DOCS_BRANCH}" "${HEAD_REF}"
            git push -u origin "${DOCS_BRANCH}"
            # Return to the PR HEAD branch
            git checkout "${HEAD_REF}"
          fi

          cursor-agent -p "You are operating in a GitHub Actions runner.  

          You can execute shell commands. The GitHub CLI is available as \`gh\` and authenticated via \`GH_TOKEN\`.

          Task:
          1. Determine what changed since the docs branch was last updated:
             - Docs branch name: ${DOCS_BRANCH}
             - Previous docs branch commit (if any): ${PREV_DOCS_SHA}
             - Compare \`origin/${DOCS_BRANCH}\` (if exists) against \`${HEAD_REF}\` to understand code changes since last docs update.
          2. Update only relevant documentation to reflect new/changed behavior.
          3. Keep changes minimal, accurate, and consistent with repository style.
          4. Create or update a stable docs branch named \`${DOCS_BRANCH}\` with your documentation updates and push it to origin.
          5. Open or update a PR from \`${DOCS_BRANCH}\` into \`${HEAD_REF}\` (stacked onto the original PR branch).
          6. Post a very short comment on the original PR that contains ONLY a link to the diff of your docs PR (no extra text).

          Guidance:
          - Use env vars: REPO, OWNER, PR_NUMBER, BASE_REF, HEAD_REF, DOCS_BRANCH, PREV_DOCS_SHA.
          - Use \`gh pr diff ${PR_NUMBER}\` to obtain the unified diff for the original PR; also use \`git\` to compare \`origin/${DOCS_BRANCH}\` to \`${HEAD_REF}\` when needed.
          - When commenting, include only a single URL to the diff view of the docs PR (e.g., \`https://github.com/${REPO}/pull/<DOCS_PR_NUMBER>/files\`) with no additional wording.
          - Prefer the smallest safe change set.
          - If no documentation updates are necessary, exit without changes.

          Deliverables (if changes are made):
          - Push a new branch, open a PR targeting the original PR's branch (stacked), and post a comment on the original PR that contains only the diff link to the new PR.

          Event payload JSON:
          ${EVENT_JSON}" --force --model "$MODEL" --output-format=text
