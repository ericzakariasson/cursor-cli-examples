name: Auto Update Docs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"
          echo "GIT_AUTHOR_NAME=Cursor Agent" >> $GITHUB_ENV
          echo "GIT_AUTHOR_EMAIL=cursoragent@cursor.com" >> $GITHUB_ENV
          echo "GIT_COMMITTER_NAME=Cursor Agent" >> $GITHUB_ENV
          echo "GIT_COMMITTER_EMAIL=cursoragent@cursor.com" >> $GITHUB_ENV

      - name: Update docs
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          MODEL: gpt-5
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BASE_REF: ${{ github.base_ref }}
          HEAD_REF: ${{ github.head_ref }}
          DOCS_BRANCH: ${{ format('docs/{0}', github.head_ref) }}
        run: |
          EVENT_JSON=$(cat "$GITHUB_EVENT_PATH" | sed 's/`/\\`/g')

          cursor-agent -p "You are operating in a GitHub Actions runner.

          You can execute shell commands. The GitHub CLI is available as \`gh\` and authenticated via \`GH_TOKEN\`. Git is available. You have write access to repository contents and can comment on pull requests, but you must not create or edit PRs.

          Goal:
          - Implement an end-to-end docs update flow driven by incremental changes to the original PR.

          Requirements:
          1) Determine what changed in the original PR and, if there have been multiple pushes, compute the incremental diffs since the last successful docs update.
          2) Update only the relevant docs based on those incremental changes.
          3) Maintain a persistent docs branch named \`${DOCS_BRANCH}\` associated with this PR head (\`${HEAD_REF}\`). Create it if missing, update it otherwise, and push changes to origin.
          4) You do NOT have permission to create PRs. Instead, post a new comment on the original PR with a human-readable markdown link that opens the GitHub compare UI pre-filled to create a PR (shorthand link). The comment MUST follow this format (single sentence):
             Here's a PR for docs: [Docs for PR #${PR_NUMBER} (${DOCS_BRANCH} â†’ ${HEAD_REF})](https://github.com/${REPO}/compare/${HEAD_REF}...${DOCS_BRANCH}?quick_pull=1)

          Inputs and conventions:
          - Env vars: REPO=${REPO}, OWNER=${OWNER}, PR_NUMBER=${PR_NUMBER}, BASE_REF=${BASE_REF}, HEAD_REF=${HEAD_REF}, DOCS_BRANCH=${DOCS_BRANCH}.
          - Use \`gh pr diff ${PR_NUMBER}\` and git history to detect changes and derive incremental ranges since the last docs update.
          - Do not attempt to create or edit PRs directly. Use the compare link format above.
          - Keep changes minimal and consistent with repo style. If no doc updates are necessary, make no changes and post no comment.

          Deliverables when updates occur:
          - Pushed commits to \`${DOCS_BRANCH}\`.
          - A single new PR comment on the original PR with the human-readable markdown link format above. Avoid posting duplicates; update a previous bot comment if present.

          Event payload JSON:
          ${EVENT_JSON}" --force --model "$MODEL" --output-format=text
