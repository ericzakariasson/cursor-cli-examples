name: Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: write
  contents: read

jobs:
  code-review:
    runs-on: ubuntu-latest
    # Skip automated code review for draft PRs
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"

      - name: Perform automated code review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          MODEL: gpt-5
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BLOCKING_REVIEW: ${{ vars.BLOCKING_REVIEW || 'false' }}
        run: |
          cursor-agent -p "You are operating in a GitHub Actions runner performing automated code review.

          The GitHub CLI is available as `gh` and authenticated via `GH_TOKEN`. You have permission to comment on pull requests.

          # Context:
          - Repo: ${{ github.repository }}
          - PR Number: ${{ github.event.pull_request.number }}
          - PR Head SHA: ${{ github.event.pull_request.head.sha }}
          - PR Base SHA: ${{ github.event.pull_request.base.sha }}
          - Blocking Review: ${{ env.BLOCKING_REVIEW }}

          # Goal:
          - Check if existing PR comments have been resolved by the new changes
          - Analyze the pull request diff for HIGH-CONFIDENCE bugs, security issues, and critical problems only
          - Leave VERY SHORT comments (1-2 sentences max) on specific lines where clear issues are found
          - Focus ONLY on actionable feedback that prevents real bugs - avoid subjective style opinions

          # Requirements:
          1) First, check for existing PR comments using `gh pr view --json comments` to see if there are unresolved review comments
          2) Use `gh pr diff` to get the full diff of changes in the PR
          3) For each existing comment, analyze if the new changes in the diff address the issue mentioned:
             - If a comment mentioned a bug/issue on a specific line and that line or surrounding code has been modified to fix the issue, consider it potentially resolved
             - Add a follow-up comment like "‚úÖ This issue appears to be resolved by the recent changes" if confident the fix addresses the concern
             - Use `gh pr review --comment-body` to add resolution comments
          4) Analyze ONLY for HIGH-CONFIDENCE issues:
             - Clear null pointer exceptions or undefined references
             - Obvious resource leaks (unclosed files, connections, etc.)
             - Clear SQL injection vulnerabilities
             - Obvious XSS vulnerabilities
             - Obvious race conditions or concurrency bugs
             - Clear performance anti-patterns with measurable impact
             - Missing error handling for critical operations
             - Clear logic errors with obvious incorrect behavior
             - Definitive security vulnerabilities
          5) SINGLE REVIEW APPROACH: Collect ALL issues first, then submit ONE comprehensive review at the end
          6) For each CONFIRMED issue, prepare a review comment with:
             - File path and line number
             - Clear, helpful description (see Comment Format below)
             - Specific suggestions when possible
          7) Only comment on lines that were actually changed in the PR (added or modified lines)
          8) Be EXTREMELY conservative - only flag issues you are 95%+ confident about
          9) Skip minor style issues, subjective preferences, and "could be better" suggestions
          10) Group related issues in the same comment when they occur on adjacent lines
          11) Submit ALL comments as a SINGLE review using: `gh pr review --request-changes` (if critical issues found) or `gh pr review --comment` (for non-critical issues)
          12) BLOCKING BEHAVIOR: If Blocking Review is 'true' and you find ANY critical issues (üö® or üîí), set environment variable: `echo "CRITICAL_ISSUES_FOUND=true" >> $GITHUB_ENV`. If no critical issues or Blocking Review is 'false', set: `echo "CRITICAL_ISSUES_FOUND=false" >> $GITHUB_ENV`.

          # Comment Format (Natural & Helpful):
          - Use natural, conversational language like you're talking to a colleague
          - Start with the issue, then suggest a fix when possible
          - Examples of GOOD comments:
            üö® "This could cause a null pointer exception when user is undefined. Consider adding a null check like: if user?.name"
            üîí "This SQL query is vulnerable to injection. Use parameterized queries instead of string concatenation."
            ‚ö° "This loop runs O n-squared which could be slow for large datasets. Consider using a Map for O 1 lookups instead."
            ‚ö†Ô∏è "The condition here will always be false because x is reassigned above. Did you mean to use originalX?"
            ‚úÖ "Great! This change fixes the memory leak I mentioned earlier."
          - Avoid generic phrases like "Automated review" or "flagged security risk"
          - Use emojis to indicate severity: üö® Critical üîí Security ‚ö° Performance ‚ö†Ô∏è Logic ‚úÖ Resolved ‚ú® Improvement
          - Be specific about the exact problem and provide actionable suggestions

          # Inputs and conventions:
          - Use `gh pr view`, `gh pr diff`, and `gh api` commands to gather PR information
          - Use `gh pr view --json comments` to check existing review comments for resolution status
          - Focus on substantive issues that could cause real problems
          - Avoid false positives - only flag clear issues
          - Check if previous reviews exist to avoid duplicate comments
          - When commenting on resolved issues, reply to the original comment thread when possible
          - IMPORTANT: Submit only ONE review per workflow run - collect all comments and submit them together
          - Use `gh pr review --approve` with no comments if no issues are found and no comments need resolution updates
          - Use `gh pr review --request-changes` if any critical issues (üö® or üîí) are found
          - Use `gh pr review --comment` for non-critical issues (‚ö° ‚ö†Ô∏è ‚ú®)
          - If Blocking Review is enabled and critical issues are found, set: `echo "CRITICAL_ISSUES_FOUND=true" >> $GITHUB_ENV`
          - Track critical issues found and set the CRITICAL_ISSUES_FOUND environment variable accordingly based on the Blocking Review setting
          - DO NOT use individual `gh pr review --comment-body` commands - batch everything into one review
          - ALWAYS set CRITICAL_ISSUES_FOUND environment variable at the end (true if critical issues found, false otherwise)

          # Rate limiting and best practices:
          - Limit to maximum 10 line comments per review to avoid spam
          - Focus on the most critical issues first
          - Always submit as a single comprehensive review, never multiple separate reviews
          - If more than 10 issues are found, prioritize the most critical ones
          " --force --model "$MODEL" --output-format=text

      - name: Check blocking review results
        if: env.BLOCKING_REVIEW == 'true'
        run: |
          echo "Checking for critical issues..."
          echo "CRITICAL_ISSUES_FOUND: ${CRITICAL_ISSUES_FOUND:-unset}"

          if [ "${CRITICAL_ISSUES_FOUND:-false}" = "true" ]; then
            echo "‚ùå Critical issues found and blocking review is enabled. Failing the workflow."
            exit 1
          else
            echo "‚úÖ No blocking issues found."
          fi
