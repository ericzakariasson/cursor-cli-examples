name: Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  pull-requests: write
  contents: read

jobs:
  code-review:
    runs-on: ubuntu-latest
    # Skip automated code review for draft PRs
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH

      - name: Configure git identity
        run: |
          git config user.name "Cursor Agent"
          git config user.email "cursoragent@cursor.com"

      - name: Perform automated code review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          MODEL: gpt-5
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cursor-agent -p "You are operating in a GitHub Actions runner performing automated code review.

          The GitHub CLI is available as `gh` and authenticated via `GH_TOKEN`. You have permission to comment on pull requests.

          # Context:
          - Repo: ${{ github.repository }}
          - PR Number: ${{ github.event.pull_request.number }}
          - PR Head SHA: ${{ github.event.pull_request.head.sha }}
          - PR Base SHA: ${{ github.event.pull_request.base.sha }}

          # Goal:
          - Analyze the pull request diff for HIGH-CONFIDENCE bugs, security issues, and critical problems only
          - Leave VERY SHORT comments (1-2 sentences max) on specific lines where clear issues are found
          - Focus ONLY on actionable feedback that prevents real bugs - avoid subjective style opinions

          # Requirements:
          1) Use `gh pr diff` to get the full diff of changes in the PR
          2) Analyze ONLY for HIGH-CONFIDENCE issues:
             - Clear null pointer exceptions or undefined references
             - Obvious resource leaks (unclosed files, connections, etc.)
             - Clear SQL injection vulnerabilities
             - Obvious XSS vulnerabilities
             - Obvious race conditions or concurrency bugs
             - Clear performance anti-patterns with measurable impact
             - Missing error handling for critical operations
             - Clear logic errors with obvious incorrect behavior
             - Definitive security vulnerabilities
          3) For each CONFIRMED issue, create a review comment using:
             `gh pr review --comment-body \"[EMOJI] [1-2 sentence description]\" --file \"[FILENAME]\" --line [LINE_NUMBER]`
          4) Only comment on lines that were actually changed in the PR (added or modified lines)
          5) Be EXTREMELY conservative - only flag issues you are 95%+ confident about
          6) Skip minor style issues, subjective preferences, and "could be better" suggestions
          7) If no HIGH-CONFIDENCE issues are found, do not leave any comments
          8) Group related issues in the same comment when they occur on adjacent lines

          # Comment Format (KEEP VERY SHORT):
          - Use emojis to indicate severity:
            üö® Critical bugs that will cause crashes/failures
            üîí Security vulnerabilities 
            ‚ö° Performance issues with measurable impact
            ‚ö†Ô∏è  Clear logic errors or incorrect behavior
            ‚ú® Minor improvements (use sparingly, only for obvious wins)
          - Maximum 1-2 sentences per comment
          - Be direct and specific
          - Suggest fix in same breath if obvious

          # Inputs and conventions:
          - Use `gh pr view`, `gh pr diff`, and `gh api` commands to gather PR information
          - Focus on substantive issues that could cause real problems
          - Avoid false positives - only flag clear issues
          - Check if previous reviews exist to avoid duplicate comments
          - Use `gh pr review --approve` with no comments if no issues are found

          # Rate limiting and best practices:
          - Limit to maximum 10 comments per PR to avoid spam
          - Focus on the most critical issues first
          - Use batch review comments when possible rather than individual line comments
          " --force --model "$MODEL" --output-format=text
